<!-- Views/History/Index.cshtml -->
@model List<Wager>
@{
    ViewData["Title"] = "History Page";
}

@{
    string decimal_to_american(float dec)
    {
        int res = 0;
        if (dec >= 2.0f)
        {
            res = (int)Math.Round((dec - 1.0f) * 100.0f);
        }
        else
        {
            res = (int)Math.Round((-100.0f) / (dec - 1.0f));
        }

        if (res >= 0)
        {
            return "+" + res.ToString();
        }

        return res.ToString();
    }

    string floatToString(float? num)
    {
        if (num != null)
        {
            if (num > 0.0f)
            {
                return "+" + num.ToString();
            }
            return num.ToString();
        }

        return "";

    }


    IDictionary<string, float> graphData = new Dictionary<string, float>();

    foreach(Wager wager in Model)
    {
        string date_tmp = DateTime.Parse(wager.date).ToString("MM/dd");
        if (graphData.ContainsKey(date_tmp))
        {
            graphData[date_tmp] += wager.amount_win;
        }
        else
        {
            graphData.Add(date_tmp, wager.amount_win);
        }
    }

    var themeExists = Context.Request.Cookies.ContainsKey("Theme");
    string theme = "";


    if (themeExists)
    {
        theme = Context.Request.Cookies["Theme"];
    }

}

<!-- Include Chart.js directly -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="text-center">
    <h1 class="display-4">Betting History</h1>
    <canvas id="historyChart" width="400" height="200" class="pb-5"></canvas>

    <table class="table table-@theme.ToLower() p-5">
        <thead>
            <tr>
                <th>Date</th>
                <th>Bet Data</th>
                <th>Bet Odds</th>
                <th>Amount Bet</th>
                <th>Amount Won</th>
                <th>Finished?</th>
                <!-- Add more headers as needed -->
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@DateTime.Parse(item.date).ToString("MM/dd")</td>

                    <td>
                        <div class="d-flex align-items-center justify-content-evenly">
                            <div class="d-flex flex-row flex-nowrap align-items-center p-2" style="max-width: 400px; overflow: auto;">
                            @foreach (var data in item.bet_data)
                            {
                                    <div class="d-flex flex-column align-items-center justify-content-evenly p-2" style="outline: 2px solid rgba(75, 192, 192, 0.2);">
                                        <div class="d-flex flex-row p-2">
                                            <span style="font-weight: bolder">@data.bet_type</span>
                                        </div>
                                        <div class="d-flex flex-row flex-nowrap align-items-center justify-content-between p-2">
                                            <div class="d-flex flex-column flex-nowrap align-items-center pe-5">
                                                <span style="font-weight: bolder;">Odds</span>
                                                <span>@decimal_to_american(data.price)</span>
                                            </div>
                                            <div class ="d-flex flex-column flex-nowrap align-items-center ps-2">
                                                <span style="font-weight: bolder;">@data.name.Split(' ').Last()</span>
                                                @if (data.bet_type.Equals("totals"))
                                                {
                                                    <span>@data.point</span>

                                                }
                                                else
                                                {
                                                    <span>@floatToString(data.point)</span>

                                                }
                                            </div>
                                        </div>
                                 </div>
                            }
                            </div>
                        </div>

                    </td>
                    <td>@floatToString(item.american_odds)</td>
                    <td>@item.wager_amount</td>
                    @if (item.completed)
                    {
                        <td>@(item.amount_win + item.wager_amount)</td>   
                    }
                    else
                    {
                        <td>@item.amount_win</td>
                    }
                    <td>@item.completed</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }
        // JavaScript code to create a chart
        document.addEventListener('DOMContentLoaded', function () {
            var isThemeDark = getCookie("Theme") === "Dark";
            var colorString = isThemeDark ? 'white' : 'black';
            var ctx = document.getElementById('historyChart').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'bar', // You can change the chart type (bar, line, pie, etc.)
                data: {
                    labels: @Html.Raw(Json.Serialize(graphData.Keys.ToList())), // Extracting BetType values
                    datasets: [{
                        label: 'Amount Won',
                        data: @Html.Raw(Json.Serialize(graphData.Values.ToList())), // Extracting Amount values
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            labels: {
                                color: colorString
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Amount Won',
                                color: colorString
                            },
                            ticks: {
                                color: colorString,
                                callback: function(value, index, ticks){
                                    return '$' + value;
                                }
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date',
                                color: colorString
                            },
                            ticks: {
                                color: colorString
                            }
                        }
                    }
                }
            });
        });
    </script>
}
